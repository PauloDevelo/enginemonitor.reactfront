// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DropDownConnectionStateItem Render Should render when the app is online false and nb action is 0 as expected  1`] = `
<DropDownConnectionStateItem>
  <DropdownItem
    disabled={true}
    onClick={[MockFunction]}
    tag="button"
    toggle={true}
  >
    <button
      className="disabled dropdown-item"
      disabled={true}
      onClick={[Function]}
      tabIndex="-1"
      type="button"
    >
      <ConnectionStateIcon
        isOnline={false}
        isSynced={true}
      >
        <FontAwesomeIcon
          border={false}
          className=""
          fixedWidth={false}
          flip={null}
          icon={
            Object {
              "icon": Array [
                512,
                512,
                Array [],
                "f05e",
                "M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z",
              ],
              "iconName": "ban",
              "prefix": "fas",
            }
          }
          inverse={false}
          listItem={false}
          mask={null}
          pull={null}
          pulse={false}
          rotation={null}
          size={null}
          spin={false}
          swapOpacity={false}
          symbol={false}
          title=""
          transform={null}
        >
          <svg
            aria-hidden="true"
            className="svg-inline--fa fa-ban fa-w-16 "
            data-icon="ban"
            data-prefix="fas"
            focusable="false"
            role="img"
            style={Object {}}
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z"
              fill="currentColor"
              style={Object {}}
            />
          </svg>
        </FontAwesomeIcon>
      </ConnectionStateIcon>
       
      <Memo(ConnectionStateMessage)
        isOnline={false}
        isSynced={true}
      >
        <FormattedMessage
          defaultMessage="Disconnected"
          id="notonline"
          values={Object {}}
        >
          Disconnected
        </FormattedMessage>
      </Memo(ConnectionStateMessage)>
      (
      <NbActionPending>
        <FormattedMessage
          defaultMessage="{nbAction, plural, =0 {synced} one {# action to sync} other {# actions to sync}}"
          description="Nb action pending"
          id="nbAction"
          values={
            Object {
              "nbAction": 0,
            }
          }
        >
          synced
        </FormattedMessage>
      </NbActionPending>
      )
    </button>
  </DropdownItem>
</DropDownConnectionStateItem>
`;

exports[`DropDownConnectionStateItem Render Should render when the app is online false and nb action is 5 as expected  1`] = `
<DropDownConnectionStateItem>
  <DropdownItem
    disabled={true}
    onClick={[MockFunction]}
    tag="button"
    toggle={true}
  >
    <button
      className="disabled dropdown-item"
      disabled={true}
      onClick={[Function]}
      tabIndex="-1"
      type="button"
    >
      <ConnectionStateIcon
        isOnline={false}
        isSynced={false}
      >
        <FontAwesomeIcon
          border={false}
          className=""
          fixedWidth={false}
          flip={null}
          icon={
            Object {
              "icon": Array [
                512,
                512,
                Array [],
                "f05e",
                "M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z",
              ],
              "iconName": "ban",
              "prefix": "fas",
            }
          }
          inverse={false}
          listItem={false}
          mask={null}
          pull={null}
          pulse={false}
          rotation={null}
          size={null}
          spin={false}
          swapOpacity={false}
          symbol={false}
          title=""
          transform={null}
        >
          <svg
            aria-hidden="true"
            className="svg-inline--fa fa-ban fa-w-16 "
            data-icon="ban"
            data-prefix="fas"
            focusable="false"
            role="img"
            style={Object {}}
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z"
              fill="currentColor"
              style={Object {}}
            />
          </svg>
        </FontAwesomeIcon>
      </ConnectionStateIcon>
       
      <Memo(ConnectionStateMessage)
        isOnline={false}
        isSynced={false}
      >
        <FormattedMessage
          defaultMessage="Disconnected"
          id="notonline"
          values={Object {}}
        >
          Disconnected
        </FormattedMessage>
      </Memo(ConnectionStateMessage)>
      (
      <NbActionPending>
        <FormattedMessage
          defaultMessage="{nbAction, plural, =0 {synced} one {# action to sync} other {# actions to sync}}"
          description="Nb action pending"
          id="nbAction"
          values={
            Object {
              "nbAction": 5,
            }
          }
        >
          5 actions to sync
        </FormattedMessage>
      </NbActionPending>
      )
    </button>
  </DropdownItem>
</DropDownConnectionStateItem>
`;

exports[`DropDownConnectionStateItem Render Should render when the app is online true and nb action is 0 as expected  1`] = `
<DropDownConnectionStateItem>
  <DropdownItem
    disabled={true}
    onClick={[MockFunction]}
    tag="button"
    toggle={true}
  >
    <button
      className="disabled dropdown-item"
      disabled={true}
      onClick={[Function]}
      tabIndex="-1"
      type="button"
    >
      <ConnectionStateIcon
        isOnline={true}
        isSynced={true}
      >
        <FontAwesomeIcon
          border={false}
          className=""
          fixedWidth={false}
          flip={null}
          icon={
            Object {
              "icon": Array [
                384,
                512,
                Array [],
                "f1e6",
                "M256 144V32c0-17.673 14.327-32 32-32s32 14.327 32 32v112h-64zm112 16H16c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h16v32c0 77.406 54.969 141.971 128 156.796V512h64v-99.204c73.031-14.825 128-79.39 128-156.796v-32h16c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16zm-240-16V32c0-17.673-14.327-32-32-32S64 14.327 64 32v112h64z",
              ],
              "iconName": "plug",
              "prefix": "fas",
            }
          }
          inverse={false}
          listItem={false}
          mask={null}
          pull={null}
          pulse={false}
          rotation={null}
          size={null}
          spin={false}
          swapOpacity={false}
          symbol={false}
          title=""
          transform={null}
        >
          <svg
            aria-hidden="true"
            className="svg-inline--fa fa-plug fa-w-12 "
            data-icon="plug"
            data-prefix="fas"
            focusable="false"
            role="img"
            style={Object {}}
            viewBox="0 0 384 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 144V32c0-17.673 14.327-32 32-32s32 14.327 32 32v112h-64zm112 16H16c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h16v32c0 77.406 54.969 141.971 128 156.796V512h64v-99.204c73.031-14.825 128-79.39 128-156.796v-32h16c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16zm-240-16V32c0-17.673-14.327-32-32-32S64 14.327 64 32v112h64z"
              fill="currentColor"
              style={Object {}}
            />
          </svg>
        </FontAwesomeIcon>
      </ConnectionStateIcon>
       
      <Memo(ConnectionStateMessage)
        isOnline={true}
        isSynced={true}
      >
        <FormattedMessage
          defaultMessage="Online"
          id="online"
          values={Object {}}
        >
          Online
        </FormattedMessage>
      </Memo(ConnectionStateMessage)>
      (
      <NbActionPending>
        <FormattedMessage
          defaultMessage="{nbAction, plural, =0 {synced} one {# action to sync} other {# actions to sync}}"
          description="Nb action pending"
          id="nbAction"
          values={
            Object {
              "nbAction": 0,
            }
          }
        >
          synced
        </FormattedMessage>
      </NbActionPending>
      )
    </button>
  </DropdownItem>
</DropDownConnectionStateItem>
`;

exports[`DropDownConnectionStateItem Render Should render when the app is online true and nb action is 3 as expected  1`] = `
<DropDownConnectionStateItem>
  <DropdownItem
    disabled={false}
    onClick={[MockFunction]}
    tag="button"
    toggle={true}
  >
    <button
      className="dropdown-item"
      disabled={false}
      onClick={[Function]}
      role="menuitem"
      tabIndex="0"
      type="button"
    >
      <ConnectionStateIcon
        isOnline={true}
        isSynced={false}
      >
        <FontAwesomeIcon
          border={false}
          className=""
          fixedWidth={false}
          flip={null}
          icon={
            Object {
              "icon": Array [
                384,
                512,
                Array [],
                "f1e6",
                "M256 144V32c0-17.673 14.327-32 32-32s32 14.327 32 32v112h-64zm112 16H16c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h16v32c0 77.406 54.969 141.971 128 156.796V512h64v-99.204c73.031-14.825 128-79.39 128-156.796v-32h16c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16zm-240-16V32c0-17.673-14.327-32-32-32S64 14.327 64 32v112h64z",
              ],
              "iconName": "plug",
              "prefix": "fas",
            }
          }
          inverse={false}
          listItem={false}
          mask={null}
          pull={null}
          pulse={false}
          rotation={null}
          size={null}
          spin={false}
          swapOpacity={false}
          symbol={false}
          title=""
          transform={null}
        >
          <svg
            aria-hidden="true"
            className="svg-inline--fa fa-plug fa-w-12 "
            data-icon="plug"
            data-prefix="fas"
            focusable="false"
            role="img"
            style={Object {}}
            viewBox="0 0 384 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 144V32c0-17.673 14.327-32 32-32s32 14.327 32 32v112h-64zm112 16H16c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h16v32c0 77.406 54.969 141.971 128 156.796V512h64v-99.204c73.031-14.825 128-79.39 128-156.796v-32h16c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16zm-240-16V32c0-17.673-14.327-32-32-32S64 14.327 64 32v112h64z"
              fill="currentColor"
              style={Object {}}
            />
          </svg>
        </FontAwesomeIcon>
      </ConnectionStateIcon>
       
      <Memo(ConnectionStateMessage)
        isOnline={true}
        isSynced={false}
      >
        <FormattedMessage
          defaultMessage="Synchronize"
          id="syncAction"
          values={Object {}}
        >
          Synchronize
        </FormattedMessage>
      </Memo(ConnectionStateMessage)>
      (
      <NbActionPending>
        <FormattedMessage
          defaultMessage="{nbAction, plural, =0 {synced} one {# action to sync} other {# actions to sync}}"
          description="Nb action pending"
          id="nbAction"
          values={
            Object {
              "nbAction": 3,
            }
          }
        >
          3 actions to sync
        </FormattedMessage>
      </NbActionPending>
      )
    </button>
  </DropdownItem>
</DropDownConnectionStateItem>
`;
